/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Strategy Builder API
 * OpenAPI spec version: 0.0.0
 */
import { customFetch } from "./lib/custom-fetch";
export interface AccountCreate {
  name: string;
  login: string;
  password: string;
  server: string;
  platform: TradingPlatform;
}

export interface AccountDetailResponse {
  account_id: string;
  name: string;
  platform: string;
  created_at: string;
  login: string;
  server: string;
}

export interface AccountResponse {
  account_id: string;
  name: string;
  platform: string;
  created_at: string;
}

export type AccountUpdateName = string | null;

export type AccountUpdateLogin = string | null;

export type AccountUpdatePassword = string | null;

export type AccountUpdateServer = string | null;

export type AccountUpdatePlatform = string | null;

export interface AccountUpdate {
  name?: AccountUpdateName;
  login?: AccountUpdateLogin;
  password?: AccountUpdatePassword;
  server?: AccountUpdateServer;
  platform?: AccountUpdatePlatform;
}

export interface BacktestCreate {
  instrument?: string;
  starting_balance?: number;
  leverage?: number;
}

export interface BacktestCreateResponse {
  backtest_id: string;
  status: TaskStatus;
}

export interface BacktestPositionsChartResponse {
  date: string;
  balance: number;
  pnl: number;
}

export type BacktestResultTotalPnl = number | null;

export type BacktestResultStartingBalance = number | null;

export type BacktestResultEndBalance = number | null;

export type BacktestResultTotalTrades = number | null;

export type BacktestResultWinRate = number | null;

export interface BacktestResult {
  backtest_id: string;
  status: TaskStatus;
  total_pnl: BacktestResultTotalPnl;
  starting_balance: BacktestResultStartingBalance;
  end_balance: BacktestResultEndBalance;
  total_trades: BacktestResultTotalTrades;
  win_rate: BacktestResultWinRate;
  created_at: string;
}

export type BacktestResultResponseTotalPnl = number | null;

export type BacktestResultResponseStartingBalance = number | null;

export type BacktestResultResponseEndBalance = number | null;

export type BacktestResultResponseTotalTrades = number | null;

export type BacktestResultResponseWinRate = number | null;

export interface BacktestResultResponse {
  backtest_id: string;
  status: TaskStatus;
  total_pnl: BacktestResultResponseTotalPnl;
  starting_balance: BacktestResultResponseStartingBalance;
  end_balance: BacktestResultResponseEndBalance;
  total_trades: BacktestResultResponseTotalTrades;
  win_rate: BacktestResultResponseWinRate;
  created_at: string;
  version_id: string;
}

export interface DeploymentCreate {
  account_id: string;
  instrument: string;
}

export interface DeploymentResponse {
  deployment_id: string;
  account_id: string;
  account_name: string;
  instrument: string;
  version_id: string;
  status: DeploymentStatus;
  created_at: string;
}

export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeploymentStatus = {
  not_deployed: "not_deployed",
  pending: "pending",
  deployed: "deployed",
  stopped: "stopped",
  failed: "failed",
} as const;

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface PaginatedResponseAccountDetailResponse {
  page: number;
  size: number;
  has_next: boolean;
  data: AccountDetailResponse[];
}

export interface PaginatedResponseBacktestResult {
  page: number;
  size: number;
  has_next: boolean;
  data: BacktestResult[];
}

export interface PaginatedResponseDeploymentResponse {
  page: number;
  size: number;
  has_next: boolean;
  data: DeploymentResponse[];
}

export interface PaginatedResponsePositionResponse {
  page: number;
  size: number;
  has_next: boolean;
  data: PositionResponse[];
}

export interface PaginatedResponseStrategiesResponse {
  page: number;
  size: number;
  has_next: boolean;
  data: StrategiesResponse[];
}

export interface PaginatedResponseStrategyVersionsResponse {
  page: number;
  size: number;
  has_next: boolean;
  data: StrategyVersionsResponse[];
}

export type PositionResponseCurrentAmount = number | null;

export type PositionResponsePrice = number | null;

export type PositionResponseLimitPrice = number | null;

export type PositionResponseStopPrice = number | null;

export type PositionResponseTpPrice = number | null;

export type PositionResponseSlPrice = number | null;

export type PositionResponseRealisedPnl = number | null;

export type PositionResponseUnrealisedPnl = number | null;

export type PositionResponseCreatedAt = string | null;

export type PositionResponseClosePrice = number | null;

export type PositionResponseClosedAt = string | null;

export interface PositionResponse {
  position_id: string;
  instrument: string;
  side: string;
  order_type: string;
  starting_amount: number;
  current_amount: PositionResponseCurrentAmount;
  price: PositionResponsePrice;
  limit_price: PositionResponseLimitPrice;
  stop_price: PositionResponseStopPrice;
  tp_price: PositionResponseTpPrice;
  sl_price: PositionResponseSlPrice;
  realised_pnl: PositionResponseRealisedPnl;
  unrealised_pnl: PositionResponseUnrealisedPnl;
  status: string;
  created_at: PositionResponseCreatedAt;
  close_price: PositionResponseClosePrice;
  closed_at: PositionResponseClosedAt;
}

export interface StrategiesResponse {
  strategy_id: string;
  name: string;
  created_at: string;
}

export type StrategyCreateName = string | null;

export type StrategyCreateStrategyId = string | null;

export interface StrategyCreate {
  prompt: string;
  name?: StrategyCreateName;
  strategy_id?: StrategyCreateStrategyId;
}

export interface StrategyCreateResponse {
  strategy_id: string;
  version_id: string;
}

export interface StrategyVersionResponse {
  version_id: string;
  strategy_id: string;
  name: string;
  prompt: string;
  backtest_status: TaskStatus;
  deployment_status: DeploymentStatus;
  created_at: string;
}

export type StrategyVersionsResponseBacktest = BacktestResult | null;

export interface StrategyVersionsResponse {
  version_id: string;
  name: string;
  created_at: string;
  deployment_status: DeploymentStatus;
  backtest: StrategyVersionsResponseBacktest;
}

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskStatus = {
  not_started: "not_started",
  pending: "pending",
  completed: "completed",
  failed: "failed",
} as const;

export type TradingPlatform =
  (typeof TradingPlatform)[keyof typeof TradingPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TradingPlatform = {
  mt5: "mt5",
} as const;

export interface UserCreate {
  username: string;
  password: string;
}

export interface UserLogin {
  username: string;
  password: string;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface WsTokenResponse {
  token: string;
}

export type GetAccountsAccountsGetParams = {
  name?: string | null;
  page?: number;
};

export type GetStrategiesStrategiesGetParams = {
  name?: string | null;
  page?: number;
};

export type GetStrategyVersionsStrategiesStrategyIdVersionsGetParams = {
  name?: string | null;
  /**
   * @minimum 1
   */
  page?: number;
};

export type GetDeploymentsStrategiesVersionsVersionIdDeploymentsGetParams = {
  /**
   * @minimum 1
   */
  page?: number;
};

export type GetBacktestsStrategiesVersionsVersionIdBacktestsGetParams = {
  /**
   * @minimum 1
   */
  page?: number;
};

export type GetPositionsStrategiesVersionsVersionIdPositionsGetParams = {
  /**
   * @minimum 1
   */
  page?: number;
};

/**
 * @summary Create Account
 */
export type createAccountAccountsPostResponse200 = {
  data: AccountResponse;
  status: 200;
};

export type createAccountAccountsPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createAccountAccountsPostResponseComposite =
  | createAccountAccountsPostResponse200
  | createAccountAccountsPostResponse422;

export type createAccountAccountsPostResponse =
  createAccountAccountsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateAccountAccountsPostUrl = () => {
  return `/accounts/`;
};

export const createAccountAccountsPost = async (
  accountCreate: AccountCreate,
  options?: RequestInit,
): Promise<createAccountAccountsPostResponse> => {
  return customFetch<createAccountAccountsPostResponse>(
    getCreateAccountAccountsPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(accountCreate),
    },
  );
};

/**
 * @summary Get Accounts
 */
export type getAccountsAccountsGetResponse200 = {
  data: PaginatedResponseAccountDetailResponse;
  status: 200;
};

export type getAccountsAccountsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getAccountsAccountsGetResponseComposite =
  | getAccountsAccountsGetResponse200
  | getAccountsAccountsGetResponse422;

export type getAccountsAccountsGetResponse =
  getAccountsAccountsGetResponseComposite & {
    headers: Headers;
  };

export const getGetAccountsAccountsGetUrl = (
  params?: GetAccountsAccountsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/accounts/?${stringifiedParams}`
    : `/accounts/`;
};

export const getAccountsAccountsGet = async (
  params?: GetAccountsAccountsGetParams,
  options?: RequestInit,
): Promise<getAccountsAccountsGetResponse> => {
  return customFetch<getAccountsAccountsGetResponse>(
    getGetAccountsAccountsGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Account
 */
export type getAccountAccountsAccountIdGetResponse200 = {
  data: AccountDetailResponse;
  status: 200;
};

export type getAccountAccountsAccountIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getAccountAccountsAccountIdGetResponseComposite =
  | getAccountAccountsAccountIdGetResponse200
  | getAccountAccountsAccountIdGetResponse422;

export type getAccountAccountsAccountIdGetResponse =
  getAccountAccountsAccountIdGetResponseComposite & {
    headers: Headers;
  };

export const getGetAccountAccountsAccountIdGetUrl = (accountId: string) => {
  return `/accounts/${accountId}`;
};

export const getAccountAccountsAccountIdGet = async (
  accountId: string,
  options?: RequestInit,
): Promise<getAccountAccountsAccountIdGetResponse> => {
  return customFetch<getAccountAccountsAccountIdGetResponse>(
    getGetAccountAccountsAccountIdGetUrl(accountId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Update Account
 */
export type updateAccountAccountsAccountIdPatchResponse200 = {
  data: AccountDetailResponse;
  status: 200;
};

export type updateAccountAccountsAccountIdPatchResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type updateAccountAccountsAccountIdPatchResponseComposite =
  | updateAccountAccountsAccountIdPatchResponse200
  | updateAccountAccountsAccountIdPatchResponse422;

export type updateAccountAccountsAccountIdPatchResponse =
  updateAccountAccountsAccountIdPatchResponseComposite & {
    headers: Headers;
  };

export const getUpdateAccountAccountsAccountIdPatchUrl = (
  accountId: string,
) => {
  return `/accounts/${accountId}`;
};

export const updateAccountAccountsAccountIdPatch = async (
  accountId: string,
  accountUpdate: AccountUpdate,
  options?: RequestInit,
): Promise<updateAccountAccountsAccountIdPatchResponse> => {
  return customFetch<updateAccountAccountsAccountIdPatchResponse>(
    getUpdateAccountAccountsAccountIdPatchUrl(accountId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(accountUpdate),
    },
  );
};

/**
 * @summary Delete Account
 */
export type deleteAccountAccountsAccountIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteAccountAccountsAccountIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteAccountAccountsAccountIdDeleteResponseComposite =
  | deleteAccountAccountsAccountIdDeleteResponse200
  | deleteAccountAccountsAccountIdDeleteResponse422;

export type deleteAccountAccountsAccountIdDeleteResponse =
  deleteAccountAccountsAccountIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteAccountAccountsAccountIdDeleteUrl = (
  accountId: string,
) => {
  return `/accounts/${accountId}`;
};

export const deleteAccountAccountsAccountIdDelete = async (
  accountId: string,
  options?: RequestInit,
): Promise<deleteAccountAccountsAccountIdDeleteResponse> => {
  return customFetch<deleteAccountAccountsAccountIdDeleteResponse>(
    getDeleteAccountAccountsAccountIdDeleteUrl(accountId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Register
 */
export type registerAuthRegisterPostResponse200 = {
  data: unknown;
  status: 200;
};

export type registerAuthRegisterPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type registerAuthRegisterPostResponseComposite =
  | registerAuthRegisterPostResponse200
  | registerAuthRegisterPostResponse422;

export type registerAuthRegisterPostResponse =
  registerAuthRegisterPostResponseComposite & {
    headers: Headers;
  };

export const getRegisterAuthRegisterPostUrl = () => {
  return `/auth/register`;
};

export const registerAuthRegisterPost = async (
  userCreate: UserCreate,
  options?: RequestInit,
): Promise<registerAuthRegisterPostResponse> => {
  return customFetch<registerAuthRegisterPostResponse>(
    getRegisterAuthRegisterPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(userCreate),
    },
  );
};

/**
 * @summary Login
 */
export type loginAuthLoginPostResponse200 = {
  data: unknown;
  status: 200;
};

export type loginAuthLoginPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type loginAuthLoginPostResponseComposite =
  | loginAuthLoginPostResponse200
  | loginAuthLoginPostResponse422;

export type loginAuthLoginPostResponse = loginAuthLoginPostResponseComposite & {
  headers: Headers;
};

export const getLoginAuthLoginPostUrl = () => {
  return `/auth/login`;
};

export const loginAuthLoginPost = async (
  userLogin: UserLogin,
  options?: RequestInit,
): Promise<loginAuthLoginPostResponse> => {
  return customFetch<loginAuthLoginPostResponse>(getLoginAuthLoginPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userLogin),
  });
};

/**
 * @summary Get Ws Token
 */
export type getWsTokenAuthWsTokenGetResponse200 = {
  data: WsTokenResponse;
  status: 200;
};

export type getWsTokenAuthWsTokenGetResponseComposite =
  getWsTokenAuthWsTokenGetResponse200;

export type getWsTokenAuthWsTokenGetResponse =
  getWsTokenAuthWsTokenGetResponseComposite & {
    headers: Headers;
  };

export const getGetWsTokenAuthWsTokenGetUrl = () => {
  return `/auth/ws-token`;
};

export const getWsTokenAuthWsTokenGet = async (
  options?: RequestInit,
): Promise<getWsTokenAuthWsTokenGetResponse> => {
  return customFetch<getWsTokenAuthWsTokenGetResponse>(
    getGetWsTokenAuthWsTokenGetUrl(),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Backtest Result
 */
export type getBacktestResultBacktestsBacktestIdGetResponse200 = {
  data: BacktestResultResponse;
  status: 200;
};

export type getBacktestResultBacktestsBacktestIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getBacktestResultBacktestsBacktestIdGetResponseComposite =
  | getBacktestResultBacktestsBacktestIdGetResponse200
  | getBacktestResultBacktestsBacktestIdGetResponse422;

export type getBacktestResultBacktestsBacktestIdGetResponse =
  getBacktestResultBacktestsBacktestIdGetResponseComposite & {
    headers: Headers;
  };

export const getGetBacktestResultBacktestsBacktestIdGetUrl = (
  backtestId: string,
) => {
  return `/backtests/${backtestId}`;
};

export const getBacktestResultBacktestsBacktestIdGet = async (
  backtestId: string,
  options?: RequestInit,
): Promise<getBacktestResultBacktestsBacktestIdGetResponse> => {
  return customFetch<getBacktestResultBacktestsBacktestIdGetResponse>(
    getGetBacktestResultBacktestsBacktestIdGetUrl(backtestId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Backtest Positions Chart
 */
export type getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse200 =
  {
    data: BacktestPositionsChartResponse[];
    status: 200;
  };

export type getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse422 =
  {
    data: HTTPValidationError;
    status: 422;
  };

export type getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponseComposite =

    | getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse200
    | getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse422;

export type getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse =
  getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponseComposite & {
    headers: Headers;
  };

export const getGetBacktestPositionsChartBacktestsBacktestIdPositionsChartGetUrl =
  (backtestId: string) => {
    return `/backtests/${backtestId}/positions-chart`;
  };

export const getBacktestPositionsChartBacktestsBacktestIdPositionsChartGet =
  async (
    backtestId: string,
    options?: RequestInit,
  ): Promise<getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse> => {
    return customFetch<getBacktestPositionsChartBacktestsBacktestIdPositionsChartGetResponse>(
      getGetBacktestPositionsChartBacktestsBacktestIdPositionsChartGetUrl(
        backtestId,
      ),
      {
        ...options,
        method: "GET",
      },
    );
  };

/**
 * @summary Get Deployment
 */
export type getDeploymentDeploymentsDeploymentIdGetResponse200 = {
  data: DeploymentResponse;
  status: 200;
};

export type getDeploymentDeploymentsDeploymentIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getDeploymentDeploymentsDeploymentIdGetResponseComposite =
  | getDeploymentDeploymentsDeploymentIdGetResponse200
  | getDeploymentDeploymentsDeploymentIdGetResponse422;

export type getDeploymentDeploymentsDeploymentIdGetResponse =
  getDeploymentDeploymentsDeploymentIdGetResponseComposite & {
    headers: Headers;
  };

export const getGetDeploymentDeploymentsDeploymentIdGetUrl = (
  deploymentId: string,
) => {
  return `/deployments/${deploymentId}`;
};

export const getDeploymentDeploymentsDeploymentIdGet = async (
  deploymentId: string,
  options?: RequestInit,
): Promise<getDeploymentDeploymentsDeploymentIdGetResponse> => {
  return customFetch<getDeploymentDeploymentsDeploymentIdGetResponse>(
    getGetDeploymentDeploymentsDeploymentIdGetUrl(deploymentId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Stop Deployment
 */
export type stopDeploymentDeploymentsDeploymentIdStopPostResponse200 = {
  data: unknown;
  status: 200;
};

export type stopDeploymentDeploymentsDeploymentIdStopPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type stopDeploymentDeploymentsDeploymentIdStopPostResponseComposite =
  | stopDeploymentDeploymentsDeploymentIdStopPostResponse200
  | stopDeploymentDeploymentsDeploymentIdStopPostResponse422;

export type stopDeploymentDeploymentsDeploymentIdStopPostResponse =
  stopDeploymentDeploymentsDeploymentIdStopPostResponseComposite & {
    headers: Headers;
  };

export const getStopDeploymentDeploymentsDeploymentIdStopPostUrl = (
  deploymentId: string,
) => {
  return `/deployments/${deploymentId}/stop`;
};

export const stopDeploymentDeploymentsDeploymentIdStopPost = async (
  deploymentId: string,
  options?: RequestInit,
): Promise<stopDeploymentDeploymentsDeploymentIdStopPostResponse> => {
  return customFetch<stopDeploymentDeploymentsDeploymentIdStopPostResponse>(
    getStopDeploymentDeploymentsDeploymentIdStopPostUrl(deploymentId),
    {
      ...options,
      method: "POST",
    },
  );
};

/**
 * @summary Create Strategy Version
 */
export type createStrategyVersionStrategiesPostResponse200 = {
  data: StrategyCreateResponse;
  status: 200;
};

export type createStrategyVersionStrategiesPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createStrategyVersionStrategiesPostResponseComposite =
  | createStrategyVersionStrategiesPostResponse200
  | createStrategyVersionStrategiesPostResponse422;

export type createStrategyVersionStrategiesPostResponse =
  createStrategyVersionStrategiesPostResponseComposite & {
    headers: Headers;
  };

export const getCreateStrategyVersionStrategiesPostUrl = () => {
  return `/strategies/`;
};

export const createStrategyVersionStrategiesPost = async (
  strategyCreate: StrategyCreate,
  options?: RequestInit,
): Promise<createStrategyVersionStrategiesPostResponse> => {
  return customFetch<createStrategyVersionStrategiesPostResponse>(
    getCreateStrategyVersionStrategiesPostUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(strategyCreate),
    },
  );
};

/**
 * @summary Get Strategies
 */
export type getStrategiesStrategiesGetResponse200 = {
  data: PaginatedResponseStrategiesResponse;
  status: 200;
};

export type getStrategiesStrategiesGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getStrategiesStrategiesGetResponseComposite =
  | getStrategiesStrategiesGetResponse200
  | getStrategiesStrategiesGetResponse422;

export type getStrategiesStrategiesGetResponse =
  getStrategiesStrategiesGetResponseComposite & {
    headers: Headers;
  };

export const getGetStrategiesStrategiesGetUrl = (
  params?: GetStrategiesStrategiesGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/strategies/?${stringifiedParams}`
    : `/strategies/`;
};

export const getStrategiesStrategiesGet = async (
  params?: GetStrategiesStrategiesGetParams,
  options?: RequestInit,
): Promise<getStrategiesStrategiesGetResponse> => {
  return customFetch<getStrategiesStrategiesGetResponse>(
    getGetStrategiesStrategiesGetUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Strategy Versions
 */
export type getStrategyVersionsStrategiesStrategyIdVersionsGetResponse200 = {
  data: PaginatedResponseStrategyVersionsResponse;
  status: 200;
};

export type getStrategyVersionsStrategiesStrategyIdVersionsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getStrategyVersionsStrategiesStrategyIdVersionsGetResponseComposite =

    | getStrategyVersionsStrategiesStrategyIdVersionsGetResponse200
    | getStrategyVersionsStrategiesStrategyIdVersionsGetResponse422;

export type getStrategyVersionsStrategiesStrategyIdVersionsGetResponse =
  getStrategyVersionsStrategiesStrategyIdVersionsGetResponseComposite & {
    headers: Headers;
  };

export const getGetStrategyVersionsStrategiesStrategyIdVersionsGetUrl = (
  strategyId: string,
  params?: GetStrategyVersionsStrategiesStrategyIdVersionsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/strategies/${strategyId}/versions?${stringifiedParams}`
    : `/strategies/${strategyId}/versions`;
};

export const getStrategyVersionsStrategiesStrategyIdVersionsGet = async (
  strategyId: string,
  params?: GetStrategyVersionsStrategiesStrategyIdVersionsGetParams,
  options?: RequestInit,
): Promise<getStrategyVersionsStrategiesStrategyIdVersionsGetResponse> => {
  return customFetch<getStrategyVersionsStrategiesStrategyIdVersionsGetResponse>(
    getGetStrategyVersionsStrategiesStrategyIdVersionsGetUrl(
      strategyId,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Delete Strategy
 */
export type deleteStrategyStrategiesStrategyIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteStrategyStrategiesStrategyIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteStrategyStrategiesStrategyIdDeleteResponseComposite =
  | deleteStrategyStrategiesStrategyIdDeleteResponse200
  | deleteStrategyStrategiesStrategyIdDeleteResponse422;

export type deleteStrategyStrategiesStrategyIdDeleteResponse =
  deleteStrategyStrategiesStrategyIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteStrategyStrategiesStrategyIdDeleteUrl = (
  strategyId: string,
) => {
  return `/strategies/${strategyId}`;
};

export const deleteStrategyStrategiesStrategyIdDelete = async (
  strategyId: string,
  options?: RequestInit,
): Promise<deleteStrategyStrategiesStrategyIdDeleteResponse> => {
  return customFetch<deleteStrategyStrategiesStrategyIdDeleteResponse>(
    getDeleteStrategyStrategiesStrategyIdDeleteUrl(strategyId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Create Backtest
 */
export type createBacktestStrategiesVersionsVersionIdBacktestPostResponse200 = {
  data: BacktestCreateResponse;
  status: 200;
};

export type createBacktestStrategiesVersionsVersionIdBacktestPostResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type createBacktestStrategiesVersionsVersionIdBacktestPostResponseComposite =

    | createBacktestStrategiesVersionsVersionIdBacktestPostResponse200
    | createBacktestStrategiesVersionsVersionIdBacktestPostResponse422;

export type createBacktestStrategiesVersionsVersionIdBacktestPostResponse =
  createBacktestStrategiesVersionsVersionIdBacktestPostResponseComposite & {
    headers: Headers;
  };

export const getCreateBacktestStrategiesVersionsVersionIdBacktestPostUrl = (
  versionId: string,
) => {
  return `/strategies/versions/${versionId}/backtest`;
};

export const createBacktestStrategiesVersionsVersionIdBacktestPost = async (
  versionId: string,
  backtestCreate: BacktestCreate,
  options?: RequestInit,
): Promise<createBacktestStrategiesVersionsVersionIdBacktestPostResponse> => {
  return customFetch<createBacktestStrategiesVersionsVersionIdBacktestPostResponse>(
    getCreateBacktestStrategiesVersionsVersionIdBacktestPostUrl(versionId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(backtestCreate),
    },
  );
};

/**
 * @summary Create Deployment
 */
export type createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse200 =
  {
    data: DeploymentResponse;
    status: 200;
  };

export type createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse422 =
  {
    data: HTTPValidationError;
    status: 422;
  };

export type createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponseComposite =

    | createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse200
    | createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse422;

export type createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse =
  createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponseComposite & {
    headers: Headers;
  };

export const getCreateDeploymentStrategiesVersionsVersionIdDeploymentsPostUrl =
  (versionId: string) => {
    return `/strategies/versions/${versionId}/deployments`;
  };

export const createDeploymentStrategiesVersionsVersionIdDeploymentsPost =
  async (
    versionId: string,
    deploymentCreate: DeploymentCreate,
    options?: RequestInit,
  ): Promise<createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse> => {
    return customFetch<createDeploymentStrategiesVersionsVersionIdDeploymentsPostResponse>(
      getCreateDeploymentStrategiesVersionsVersionIdDeploymentsPostUrl(
        versionId,
      ),
      {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(deploymentCreate),
      },
    );
  };

/**
 * @summary Get Deployments
 */
export type getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse200 =
  {
    data: PaginatedResponseDeploymentResponse;
    status: 200;
  };

export type getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse422 =
  {
    data: HTTPValidationError;
    status: 422;
  };

export type getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponseComposite =

    | getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse200
    | getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse422;

export type getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse =
  getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponseComposite & {
    headers: Headers;
  };

export const getGetDeploymentsStrategiesVersionsVersionIdDeploymentsGetUrl = (
  versionId: string,
  params?: GetDeploymentsStrategiesVersionsVersionIdDeploymentsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/strategies/versions/${versionId}/deployments?${stringifiedParams}`
    : `/strategies/versions/${versionId}/deployments`;
};

export const getDeploymentsStrategiesVersionsVersionIdDeploymentsGet = async (
  versionId: string,
  params?: GetDeploymentsStrategiesVersionsVersionIdDeploymentsGetParams,
  options?: RequestInit,
): Promise<getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse> => {
  return customFetch<getDeploymentsStrategiesVersionsVersionIdDeploymentsGetResponse>(
    getGetDeploymentsStrategiesVersionsVersionIdDeploymentsGetUrl(
      versionId,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Strategy Version
 */
export type getStrategyVersionStrategiesVersionsVersionIdGetResponse200 = {
  data: StrategyVersionResponse;
  status: 200;
};

export type getStrategyVersionStrategiesVersionsVersionIdGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getStrategyVersionStrategiesVersionsVersionIdGetResponseComposite =
  | getStrategyVersionStrategiesVersionsVersionIdGetResponse200
  | getStrategyVersionStrategiesVersionsVersionIdGetResponse422;

export type getStrategyVersionStrategiesVersionsVersionIdGetResponse =
  getStrategyVersionStrategiesVersionsVersionIdGetResponseComposite & {
    headers: Headers;
  };

export const getGetStrategyVersionStrategiesVersionsVersionIdGetUrl = (
  versionId: string,
) => {
  return `/strategies/versions/${versionId}`;
};

export const getStrategyVersionStrategiesVersionsVersionIdGet = async (
  versionId: string,
  options?: RequestInit,
): Promise<getStrategyVersionStrategiesVersionsVersionIdGetResponse> => {
  return customFetch<getStrategyVersionStrategiesVersionsVersionIdGetResponse>(
    getGetStrategyVersionStrategiesVersionsVersionIdGetUrl(versionId),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Delete Version
 */
export type deleteVersionStrategiesVersionsVersionIdDeleteResponse200 = {
  data: unknown;
  status: 200;
};

export type deleteVersionStrategiesVersionsVersionIdDeleteResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type deleteVersionStrategiesVersionsVersionIdDeleteResponseComposite =
  | deleteVersionStrategiesVersionsVersionIdDeleteResponse200
  | deleteVersionStrategiesVersionsVersionIdDeleteResponse422;

export type deleteVersionStrategiesVersionsVersionIdDeleteResponse =
  deleteVersionStrategiesVersionsVersionIdDeleteResponseComposite & {
    headers: Headers;
  };

export const getDeleteVersionStrategiesVersionsVersionIdDeleteUrl = (
  versionId: string,
) => {
  return `/strategies/versions/${versionId}`;
};

export const deleteVersionStrategiesVersionsVersionIdDelete = async (
  versionId: string,
  options?: RequestInit,
): Promise<deleteVersionStrategiesVersionsVersionIdDeleteResponse> => {
  return customFetch<deleteVersionStrategiesVersionsVersionIdDeleteResponse>(
    getDeleteVersionStrategiesVersionsVersionIdDeleteUrl(versionId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

/**
 * @summary Get Backtests
 */
export type getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse200 = {
  data: PaginatedResponseBacktestResult;
  status: 200;
};

export type getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getBacktestsStrategiesVersionsVersionIdBacktestsGetResponseComposite =

    | getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse200
    | getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse422;

export type getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse =
  getBacktestsStrategiesVersionsVersionIdBacktestsGetResponseComposite & {
    headers: Headers;
  };

export const getGetBacktestsStrategiesVersionsVersionIdBacktestsGetUrl = (
  versionId: string,
  params?: GetBacktestsStrategiesVersionsVersionIdBacktestsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/strategies/versions/${versionId}/backtests?${stringifiedParams}`
    : `/strategies/versions/${versionId}/backtests`;
};

export const getBacktestsStrategiesVersionsVersionIdBacktestsGet = async (
  versionId: string,
  params?: GetBacktestsStrategiesVersionsVersionIdBacktestsGetParams,
  options?: RequestInit,
): Promise<getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse> => {
  return customFetch<getBacktestsStrategiesVersionsVersionIdBacktestsGetResponse>(
    getGetBacktestsStrategiesVersionsVersionIdBacktestsGetUrl(
      versionId,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Get Positions
 */
export type getPositionsStrategiesVersionsVersionIdPositionsGetResponse200 = {
  data: PaginatedResponsePositionResponse;
  status: 200;
};

export type getPositionsStrategiesVersionsVersionIdPositionsGetResponse422 = {
  data: HTTPValidationError;
  status: 422;
};

export type getPositionsStrategiesVersionsVersionIdPositionsGetResponseComposite =

    | getPositionsStrategiesVersionsVersionIdPositionsGetResponse200
    | getPositionsStrategiesVersionsVersionIdPositionsGetResponse422;

export type getPositionsStrategiesVersionsVersionIdPositionsGetResponse =
  getPositionsStrategiesVersionsVersionIdPositionsGetResponseComposite & {
    headers: Headers;
  };

export const getGetPositionsStrategiesVersionsVersionIdPositionsGetUrl = (
  versionId: string,
  params?: GetPositionsStrategiesVersionsVersionIdPositionsGetParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/strategies/versions/${versionId}/positions?${stringifiedParams}`
    : `/strategies/versions/${versionId}/positions`;
};

export const getPositionsStrategiesVersionsVersionIdPositionsGet = async (
  versionId: string,
  params?: GetPositionsStrategiesVersionsVersionIdPositionsGetParams,
  options?: RequestInit,
): Promise<getPositionsStrategiesVersionsVersionIdPositionsGetResponse> => {
  return customFetch<getPositionsStrategiesVersionsVersionIdPositionsGetResponse>(
    getGetPositionsStrategiesVersionsVersionIdPositionsGetUrl(
      versionId,
      params,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};
